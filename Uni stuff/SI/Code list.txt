code list cameron hillier
may be subject to change.
rooms class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace assignmenttest.Backend
{
    class Room
    {
        private List<DateTime> reservedDates;
        private int id;
		private string name;
		private string description;
		private float price;
		private Hotel hotel;
        public static int RoomID = 0;
        public static List<DateTime> ReservedDate;
      

        #region Getters
        public List<DateTime> ReservedDates
        { get{return reservedDates;}}

        public int Id
        {get{return id; }}

        public string Name
        {get{return name;}}

        public string Description
        {get{return description;}}

        public float Price
        {get{return price;}}

        internal Hotel Hotel
        {get{return hotel;}}
        #endregion

        public Room(Hotel hotel, int id, string name, string description, float price, List<DateTime> reservedDates)
        {
			this.hotel = hotel;
            this.id = id;
            this.name = name;
            this.description = description;
            this.price = price;
            this.reservedDates = reservedDates;
            Room.RoomID = id;
            Room.ReservedDate = reservedDates;
        }

    }
}

hotels class.
this is mostly complete but likely needs small changes to integrate properly.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace assignmenttest.Backend
{
    class Hotel
    {
        private List<Room> rooms;
        private int id;
		private string name;
        private int rating;
		private string description;
        private string address;
        public static string Hotel_name;
        public static int Hotel_rating;

        #region Getters
        internal List<Room> Rooms
        {get{return rooms;}}

        public int Id
        {get{return id;}}

        public string Name
        {get{return name;}}

        public int Rating
        {get{return rating;}}

        public string Description
        {get{return description;}}

        public string Address
        {get{return address;}}
        #endregion

        public Hotel(int id, string name, int rating, string description, string address)
        {
            this.id = id;
            this.name = name;
            this.rating = rating;
            this.description = description;
            this.address = address;
            rooms = new List<Room>();
            Hotel_name = name;
            Hotel_rating = rating;

        }

        public void AddRoom(int id, string name, string description, float price, List<DateTime> reservedDates)
        {
            //cannot be added at construction. so we have to add them later
            Room room = new Room(this,id,name,description,price,reservedDates);
            rooms.Add(room);
        }

        public List<Room> GetRooms()
        {
            //return a list of rooms
            return(rooms); // simply returning and throwing an error if rooms is empty
            if(rooms == null)
            {
                throw new NotImplementedException();
            }
        }

        public List<Room> GetRooms(List<DateTime> freeDates)
        {
            //return a list of rooms based on the dates they are available
            while (id != null)// this should be a foreach for the rooms
            {
                
                    if (freeDates != Room.ReservedDate) ;
                    {
                        return (rooms);
                    }
                
            }
            if (rooms == null)
            {
                throw new NotImplementedException(); //throwing an error if the rooms list is empty
            }
            return(null);//returning something if the other statements come back empty, this shouldn't happen but the program errors without it
        }
			
    }
}



booking backend class.
this one is likely to have a few more changes than the class above
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;



namespace assignmenttest.Backend
{
    class BookingBackend
    {
        private List<Hotel> hotels;
        private List<BillableItem> items;

        public BookingBackend()
        {

        }

        #region Getters and Setters

        public List<Hotel> Hotels
        {get{return hotels;}

            set
            {
                hotels = value;
            }
        }

        #endregion

        public bool DatabaseConnectionActive()
        {
			//returns a bool relating to the status of the db connection
			throw new NotImplementedException();
        }

		public void MakeBooking(Room room, List<DateTime> datesReserved,List<BillableItem> billableItems, Customer customer)
        {
            //this will be passed to a helper class that handles booking in a batch process
            throw new NotImplementedException();
        }

		public List<Hotel> GetHotels()
		{
			//return a list of hotels
            return(hotels);
            if (hotels == null) //returning hotels and throwing an error if there are no hotels
            {
                throw new NotImplementedException();
            }
		}

        public List<Hotel> GetHotels(int rating)
        {
          
            //return a list of hotels by rating
            if (Hotel.Hotel_rating == 5)
            {
                
                return (Hotel.Hotel_name);// the list does not want to return a string, and i have not been able to change this
                                          // this return also goes in all the ifs down to if rating =1
            }
            else if (Hotel.Hotel_rating == 4)
            {
                // return (Hotel.Hotel_name) 
            }
            else if (Hotel.Hotel_rating == 3)
            {
                //return (Hotel.Hotel_name) 
            }
            else if (Hotel.Hotel_rating == 2)
            {
                // return (Hotel.Hotel_name)
            }
            else if (Hotel.Hotel_rating == 1)
            {
                
            }
            else
            {
               return(null);
            }

            //throw new NotImplementedException();
        }

        public List<Room> GetRooms()
		{
			//return a list of all rooms from all hotels
            //for(all hotels);  //this should be a foreach in hotels
            {
            // return(Room.RoomID);
            }
            
			throw new NotImplementedException();
		}

        public List<Room> GetRooms(List<DateTime> freeDates)
        {
            //return a list of all available rooms from all hotels 

            if (Room.ReservedDate != freeDates)
            {
                // return (Room.RoomID); 
            }

            //then as above

            // if (hotels == null)
            {
                throw new NotImplementedException();
            }

        }

        public List<BillableItem> GetBillableItems()
		{
			//return a list of available items
            return (Hotel.Hotel_name);
            if (hotels == null)
            {
                throw new NotImplementedException();
            }
		}

    }
}


